<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<annotation-driven />
	<!-- 扫描配置 -->
	<context:component-scan base-package="com.ydl.residentmap" use-default-filters="true"></context:component-scan>
	
	<mvc:default-servlet-handler/>
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

    <!-- 文件上传解析 -->
    <beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    </beans:bean>
	
	<!-- 多视图解析 .json -->
    <beans:bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">  
        <beans:property name="mediaTypes">  
            <beans:value>  
                json=application/json  
            </beans:value>  
        </beans:property>  
        <beans:property name="defaultContentType" value="text/html"/>  
    </beans:bean>
	<beans:bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">  
	        <beans:property name="order" value="0"/>  
	        <beans:property name="contentNegotiationManager" ref="contentNegotiationManager"/>  
	        <!-- <beans:property name="viewResolvers">  
	            <beans:list>  
	                <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
	                    <beans:property name="viewClass" value="org.springframework.web.servlet.view.InternalResourceView"/>  
	                    <beans:property name="prefix" value="/views/"/>  
	                    <beans:property name="suffix" value=".html"></beans:property>  
	                </beans:bean>  
	            </beans:list>  
	        </beans:property> -->  
	        <beans:property name="defaultViews">  
	            <beans:list>  
	                <beans:bean class="com.alibaba.fastjson.support.spring.FastJsonJsonView">  
	                    <beans:property name="charset" value="UTF-8"/>  
	                </beans:bean>  
	            </beans:list>  
	        </beans:property>  
	    </beans:bean>    
	    <beans:bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"/>
	    
	    <!-- <beans:bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">根据确定出的不同MIME名，使用不同视图解析器解析视图
			<beans:property name="order" value="1" />设置优先级
			<beans:property name="defaultContentType" value="text/html" />设置默认的MIME类型，如果没有指定拓展名或请求参数，则使用此默认MIME类型解析视图
			<beans:property name="ignoreAcceptHeader" value="true" />是否不适用请求头确定MIME类型
			<beans:property name="favorPathExtension" value="false" />是否根据路径拓展名确定MIME类型
			<beans:property name="favorParameter" value="true" />	是否使用参数来确定MIME类型
			<beans:property name="parameterName" value="type" />上一个属性配置为true,我们指定type请求参数判断MIME类型
			<beans:property name="mediaTypes">根据请求参数映射到相应的MIME类型
				<beans:map>
					<beans:entry key="html" value="text/html" />
					<beans:entry key="json" value="application/json" />
				</beans:map>
			</beans:property>
			<beans:property name="viewResolvers">  
	            <beans:list>  
	                <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
	                    <beans:property name="viewClass" value="org.springframework.web.servlet.view.InternalResourceView"/>  
	                    <beans:property name="prefix" value="/views/"/>  
	                    <beans:property name="suffix" value=".html"></beans:property>  
	                </beans:bean>  
	            </beans:list>  
	        </beans:property>
			<beans:property name="defaultViews">设置默认的候选视图，如果有合适的MIME类型，将优先从以下选择视图，找不到再在整个Spring容器里寻找已注册的合适视图
				<beans:list>
					<beans:bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
					<beans:bean class="org.springframework.web.servlet.view.InternalResourceView">
						<beans:property name="url" value="/views/index.html"></beans:property>
					</beans:bean>
				</beans:list>
			</beans:property>
		</beans:bean> -->
		
	<!-- <mvc:resources mapping="/views/**" location="/views/" /> -->
   
    <!-- Hibernate4 -->
    <!-- 加载资源文件  其中包含变量信息，必须在Spring配置文件的最前面加载，即第一个加载-->
    <context:property-placeholder location="classpath:config/persistence-mysql.properties" />
    
    <!-- 数据库映射 -->
    <beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      <beans:property name="driverClassName" value="${jdbc.driverClassName}" />
      <beans:property name="url" value="${jdbc.url}" />
      <beans:property name="username" value="${jdbc.user}" />
      <beans:property name="password" value="${jdbc.pass}" />
   </beans:bean>
   
   <beans:bean id="sessionFactory" 
        class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <beans:property name="dataSource" ref="dataSource" />
        <!-- <property name="amingStrategy">
            <bean class="org.hibernate.cfg.ImprovedNamingStrategy"></bean>
        </property> -->
        <beans:property name="packagesToScan" value="com.ydl.residentmap.model"/>
        <beans:property name="hibernateProperties">
            <beans:props>
                <beans:prop key="hibernate.hbm2ddl.auto">update</beans:prop>
                <beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLInnoDBDialect</beans:prop>
                <beans:prop key="hibernate.show_sql">true</beans:prop>
                <beans:prop key="hibernate.format_sql">true</beans:prop>
            </beans:props>
        </beans:property>
    </beans:bean>
    
    <!-- 事务 -->
    <beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
    	<beans:property name="sessionFactory" ref="sessionFactory"></beans:property>
    </beans:bean>
    
    <tx:annotation-driven transaction-manager="transactionManager" />
    
    <context:annotation-config />
    
	<context:component-scan base-package="com.ydl.residentmap" use-default-filters="false">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
    
</beans:beans>
